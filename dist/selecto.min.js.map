{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext } from \"./types\";\nimport { IObject, addClass, hasClass } from \"@daybrush/utils\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n};\n\nexport const PROPERTIES = [\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n    \"triggerDragStart\",\n] as const;\n","import Component from \"@egjs/component\";\nimport Dragger, { OnDrag } from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends Component {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private dragger!: Dragger;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n        this.differ = new ChildrenDiffer(selectedTargets);\n\n        return this;\n    }\n\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.dragger.onDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.dragger = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent: OnDragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n        };\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const dragContainer = this.options.dragContainer;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.dragger = new Dragger(this.dragContainer, {\n            container: window,\n            preventDefault: false,\n            dragstart: this.onDragStart,\n            drag: this.onDrag,\n            dragend: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target);\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const passedTargets: Array<HTMLElement | SVGElement> = [];\n\n        rects.forEach((rect, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rect;\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                passedTargets.push(targets[i]);\n                return;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                passedTargets.push(targets[i]);\n            }\n        });\n\n        return passedTargets;\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectableRects.forEach(rect => {\n                rect.top -= offsetY;\n                rect.bottom -= offsetY;\n                rect.left -= offsetX;\n                rect.right -= offsetX;\n            });\n            this.dragger.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private getSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(selectedTargets: Array<HTMLElement | SVGElement>, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n    }\n    private selecteEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        inputEvent: any,\n    ) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragEvent, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const { continueSelect, selectFromInside, selectByClick } = this.options;\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n        datas.startSelectedTargets = this.selectedTargets;\n\n        const pointTarget = clickedTarget || document.elementFromPoint(clientX, clientY);\n        let firstPassedTargets = this.hitTest({\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n        }, clientX, clientY, selectableTargets, selectableRects).filter(\n            target => target === pointTarget || target.contains(pointTarget),\n        );\n\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            return false;\n        }\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.getSelectedTargets(firstPassedTargets);\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", e) : true;\n\n        if (!result) {\n            return false;\n        }\n        this.select(firstPassedTargets, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        this.target.style.cssText += `left:${clientX}px;top:${clientY}px`;\n\n        if (isPreventSelect && selectByClick) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            return false;\n        } else {\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any) {\n        const {\n            distX,\n            distY,\n            datas,\n            inputEvent,\n        } = e;\n        const { startX, startY } = datas;\n        const tx = Math.min(0, distX);\n        const ty = Math.min(0, distY);\n        const width = Math.abs(distX);\n        const height = Math.abs(distY);\n\n        this.target.style.cssText\n            += `display: block;`\n            + `left:${startX}px;top:${startY}px;`\n            + `transform: translate(${tx}px, ${ty}px);`\n            + `width:${width}px;height:${height}px;`;\n\n        const left = startX + tx;\n        const top = startY + ty;\n        const passedTargets = this.hitTest({\n            left,\n            top,\n            right: left + width,\n            bottom: top + height,\n        }, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.getSelectedTargets(passedTargets);\n\n        this.select(selectedTargets, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDrag = (e: OnDrag) => {\n        const { scrollOptions } = this.options;\n        if (scrollOptions && scrollOptions.container) {\n            if (this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = ({ datas, inputEvent }: OnDragEvent) => {\n        this.dragScroll.dragEnd();\n        this.target.style.cssText += \"display: none;\";\n        this.selecteEnd(datas.startSelectedTargets, datas.selectedTargets, inputEvent);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        return toggleContinueSelect.every(key => combi.indexOf(key) > -1);\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.dragger.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = [].slice.call(dragContainer) as Element[];\n\n        containers.some(container => {\n            if (container === e.target || container.contains(e.target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends Component, SelectoProperties {\n    on<T extends keyof SelectoEvents>(eventName: T, handlerToAttach: (event: SelectoEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","injector","CLASS_NAME","OPTION_TYPES","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","PROPERTIES","options","_super","_this","ChildrenDiffer","DragScroll","e","clickedTarget","datas","clientX","clientY","inputEvent","getSelectableTargets","selectableRects","map","rect","getBoundingClientRect","left","top","right","bottom","startSelectedTargets","selectedTargets","pointTarget","elementFromPoint","firstPassedTargets","hitTest","filter","contains","hasInsideTargets","length","isPreventSelect","getSelectedTargets","type","trigger","select","startX","startY","cssText","onDragEnd","preventDefault","dragScroll","dragStart","drag","check","dragEnd","selecteEnd","sameCombiKey","dragger","isFlag","window","documentElement","slice","call","some","undefined","initElement","initDragScroll","setKeyController","differ","this","setKeyEvent","onDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","touch","touches","changedTouches","dragEvent","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Dragger","dragstart","onDrag","dragend","addEvent","inject","selectRect","targets","rects","passedTargets","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","Math","max","testRight","min","testTop","testBottom","push","rate","round","direction","offsetX","offsetY","scrollBy","distX","distY","list","prevList","added","removed","index","concat","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","tx","ty","width","abs","height","combi","getCombi","key","every","indexOf","Selecto","prototype","property","enumerable","configurable","get","setter","set","value","defineProperty","Component","modules"],"mappings":"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"}