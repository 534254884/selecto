{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass } from \"@daybrush/utils\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(e: any, ratio: number): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    // h ^ 2 + (ratio * h) ^ 2 = dist\n    // (1 + ratio ^ 2) * h^2 = dist ^ 2\n    // dist * Math.atan(ratio);\n    const width = Math.abs(distX);\n    const height = Math.abs(distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"scale\"\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    scale: Number,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n    \"triggerDragStart\",\n] as const;\n","import Component from \"@egjs/component\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent, isArray } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue, getRect } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends Component {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            cspNonce: \"\",\n            scale: 1,\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n        this.differ = new ChildrenDiffer(selectedTargets);\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[][] | string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragEnd: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n\n        return targets.filter((target, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rects[i];\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                return true;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return false;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                return true;\n            }\n            return false;\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectableRects.forEach(rect => {\n                rect.top -= offsetY;\n                rect.bottom -= offsetY;\n                rect.left -= offsetX;\n                rect.right -= offsetX;\n            });\n            this.gesto.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private passSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(\n        selectedTargets: Array<HTMLElement | SVGElement>, rect: Rect, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble } = e;\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const { continueSelect, selectFromInside, selectByClick } = this.options;\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n                width,\n                height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n        datas.startSelectedTargets = this.selectedTargets;\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFromInside || selectByClick) {\n            let pointTarget\n                = (clickedTarget || document.elementFromPoint(clientX, clientY)) as HTMLElement | SVGElement;\n\n            while (pointTarget) {\n                if (selectableTargets.indexOf(pointTarget as HTMLElement | SVGElement) > -1) {\n                    break;\n                }\n                pointTarget = pointTarget.parentElement;\n            }\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", { ...e }) : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.passSelectedTargets(firstPassedTargets);\n        }\n\n        this.select(firstPassedTargets, hitRect, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        this.target.style.cssText\n            += `left:0px;top:0px;transform: translate(${clientX}px, ${clientY}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            e.stop();\n            return false;\n        } else {\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any) {\n        const {\n            datas,\n            inputEvent,\n        } = e;\n        const rect = getRect(e, this.options.ratio);\n        const {\n            top,\n            left,\n            width,\n            height,\n        } = rect;\n        const scale = this.options.scale\n        this.target.style.cssText\n            += `display: block;`\n            + `left:0px;top:0px;`\n            + `transform: translate(${left * scale}px, ${top * scale}px);`\n            + `width:${width * scale}px;height:${height * scale}px;`;\n\n        const passedTargets = this.hitTest(\n            rect, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.passSelectedTargets(passedTargets);\n\n        this.trigger(\"drag\", {\n            ...e,\n            rect,\n        });\n        this.select(selectedTargets, rect, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDrag = (e: OnDrag) => {\n        const { scrollOptions } = this.options;\n        if (scrollOptions && scrollOptions.container) {\n            if (this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas } = e;\n        const rect = getRect(e, this.options.ratio);\n        this.dragScroll.dragEnd();\n        this.target.style.cssText += \"display: none;\";\n        this.trigger(\"dragEnd\", {\n            ...e,\n            rect,\n        });\n        this.selectEnd(\n            datas.startSelectedTargets, datas.selectedTargets, rect, e);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = (isArray(toggleContinueSelect[0]) ? toggleContinueSelect : [toggleContinueSelect]);\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some(keys => keys.some(key => key === singleKey));\n        }\n        return toggleKeys.some(keys => keys.every(key => combi.indexOf(key) > -1));\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = dragContainer instanceof Element\n            ? [dragContainer] : [].slice.call(dragContainer) as Element[];\n        const target = e.target;\n\n        containers.some(container => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends Component, SelectoProperties {\n    on<T extends keyof SelectoEvents>(eventName: T, handlerToAttach: (event: SelectoEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","distX","distY","startX","startY","nextHeight","Math","sqrt","tx","min","ty","width","abs","height","left","top","right","bottom","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","scale","options","_super","_this","ChildrenDiffer","DragScroll","clickedTarget","datas","clientX","clientY","inputEvent","getSelectableTargets","selectableRects","map","rect","getBoundingClientRect","startSelectedTargets","selectedTargets","hitRect","firstPassedTargets","pointTarget","elementFromPoint","indexOf","parentElement","hasInsideTargets","length","isPreventSelect","stop","type","trigger","passSelectedTargets","select","cssText","onDragEnd","dragScroll","dragStart","drag","check","dragEnd","selectEnd","sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","undefined","initElement","initDragScroll","setKeyController","differ","this","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","touch","touches","changedTouches","dragEvent","onDragStart","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Gesto","onDrag","addEvent","inject","nonce","selectRect","targets","rects","filter","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","max","testRight","testTop","testBottom","rate","round","direction","offsetX","offsetY","scrollBy","push","passedTargets","list","prevList","added","removed","index","concat","selected","isDouble","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","hitTest","isKeyup","combi","getCombi","key","toggleKeys","singleKey_1","keys","every","Selecto","prototype","property","enumerable","configurable","get","setter","set","defineProperty","Component","modules"],"mappings":"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"}