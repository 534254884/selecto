{"version":3,"file":"selecto.pkgd.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext } from \"./types\";\nimport { IObject, addClass, hasClass } from \"@daybrush/utils\";\nimport { METHODS } from \"./consts\";\nimport Selecto from \"./Selecto\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n};\n\nexport const PROPERTIES = [\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"click\",\n    \"setSelectedTargets\",\n] as const;\n","import Component from \"@egjs/component\";\nimport Dragger, { OnDrag } from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends Component {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window;\n    private container!: HTMLElement;\n    private dragger!: Dragger;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            ...options,\n        };\n        this.initElement();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): void {\n        this.selectedTargets = selectedTargets;\n        this.differ = new ChildrenDiffer(selectedTargets);\n    }\n\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.dragger = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     *\n     */\n    public click(e: MouseEvent | TouchEvent, clickedTarget?: Element): void {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent: OnDragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n        };\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}>\n                asd\n                {/* <!-- aa --> */}\n            </div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        this.dragContainer = this.options.dragContainer || this.target.parentNode as any;\n        this.dragger = new Dragger(this.dragContainer as any, {\n            container: window,\n            preventDefault: false,\n            dragstart: this.onDragStart,\n            drag: this.onDrag,\n            dragend: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target);\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const passedTargets: Array<HTMLElement | SVGElement> = [];\n\n        rects.forEach((rect, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rect;\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                passedTargets.push(targets[i]);\n                return;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                passedTargets.push(targets[i]);\n            }\n        });\n\n        return passedTargets;\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private getSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(selectedTargets: Array<HTMLElement | SVGElement>, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n    }\n    private selecteEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        inputEvent: any,\n    ) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragEvent, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const { continueSelect, selectFromInside } = this.options;\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n        datas.startSelectedTargets = this.selectedTargets;\n\n        const pointTarget = clickedTarget || document.elementFromPoint(clientX, clientY);\n        let firstPassedTargets = this.hitTest({\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n        }, clientX, clientY, selectableTargets, selectableRects).filter(\n            target => target === pointTarget || target.contains(pointTarget),\n        );\n\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.getSelectedTargets(firstPassedTargets);\n        }\n\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", e) : true;\n\n        if (!result) {\n            return false;\n        }\n        this.select(firstPassedTargets, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        this.target.style.cssText += `left:${clientX}px;top:${clientY}px`;\n\n        if (!selectFromInside && hasInsideTargets) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            return false;\n        } else {\n            return true;\n        }\n    }\n    private onDrag = ({\n        distX,\n        distY,\n        datas,\n        inputEvent,\n    }: OnDrag) => {\n        const { startX, startY } = datas;\n        const tx = Math.min(0, distX);\n        const ty = Math.min(0, distY);\n        const width = Math.abs(distX);\n        const height = Math.abs(distY);\n\n        this.target.style.cssText\n            += `display: block;`\n            + `transform: translate(${tx}px, ${ty}px);`\n            + `width:${width}px;height:${height}px;`;\n\n        const left = startX + tx;\n        const top = startY + ty;\n        const passedTargets = this.hitTest({\n            left,\n            top,\n            right: left + width,\n            bottom: top + height,\n        }, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.getSelectedTargets(passedTargets);\n\n        this.select(selectedTargets, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDragEnd = ({ datas, inputEvent }: OnDragEvent) => {\n        this.target.style.cssText += \"display: none;\";\n        this.selecteEnd(datas.startSelectedTargets, datas.selectedTargets, inputEvent);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        return toggleContinueSelect.every(key => combi.indexOf(key) > -1);\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.dragger.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer as any;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        if (dragContainer === e.target || dragContainer.contains(e.target)) {\n            e.preventDefault();\n            return;\n        }\n    }\n}\n\ninterface Selecto extends Component, SelectoProperties {\n    on<T extends keyof SelectoEvents>(eventName: T, handlerToAttach: (event: SelectoEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","injector","CLASS_NAME","OPTION_TYPES","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","PROPERTIES","options","_super","_this","ChildrenDiffer","e","clickedTarget","datas","clientX","clientY","inputEvent","getSelectableTargets","selectableRects","map","rect","getBoundingClientRect","left","top","right","bottom","startSelectedTargets","selectedTargets","pointTarget","elementFromPoint","firstPassedTargets","hitTest","filter","contains","hasInsideTargets","length","getSelectedTargets","type","trigger","select","startX","startY","cssText","onDragEnd","preventDefault","distX","distY","tx","Math","min","ty","width","abs","height","passedTargets","selecteEnd","sameCombiKey","dragger","isFlag","window","documentElement","initElement","setKeyController","differ","this","setKeyEvent","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","touch","touches","dragEvent","onDragStart","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","parentNode","Dragger","dragstart","drag","onDrag","dragend","addEvent","inject","selectRect","targets","rects","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","max","testRight","testTop","testBottom","push","rate","round","slice","call","querySelectorAll","list","prevList","added","removed","index","concat","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","combi","getCombi","key","every","indexOf","Selecto","prototype","property","enumerable","configurable","get","setter","set","value","Object","defineProperty","Component","modules"],"mappings":"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"}