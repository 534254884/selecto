{"version":3,"file":"selecto.cjs.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext } from \"./types\";\nimport { IObject, addClass, hasClass } from \"@daybrush/utils\";\nimport { METHODS } from \"./consts\";\nimport Selecto from \"./Selecto\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n};\n\nexport const PROPERTIES = [\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n] as const;\n","import Component from \"@egjs/component\";\nimport Dragger, { OnDrag } from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends Component {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private dragger!: Dragger;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n        this.differ = new ChildrenDiffer(selectedTargets);\n\n        return this;\n    }\n\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.dragger = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent: OnDragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n        };\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const dragContainer = this.options.dragContainer;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.dragger = new Dragger(this.dragContainer, {\n            container: window,\n            preventDefault: false,\n            dragstart: this.onDragStart,\n            drag: this.onDrag,\n            dragend: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target);\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const passedTargets: Array<HTMLElement | SVGElement> = [];\n\n        rects.forEach((rect, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rect;\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                passedTargets.push(targets[i]);\n                return;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                passedTargets.push(targets[i]);\n            }\n        });\n\n        return passedTargets;\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectableRects.forEach(rect => {\n                rect.top -= offsetY;\n                rect.bottom -= offsetY;\n                rect.left -= offsetX;\n                rect.right -= offsetX;\n            });\n            this.dragger.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private getSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(selectedTargets: Array<HTMLElement | SVGElement>, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n    }\n    private selecteEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        inputEvent: any,\n    ) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragEvent, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const { continueSelect, selectFromInside, selectByClick } = this.options;\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n        datas.startSelectedTargets = this.selectedTargets;\n\n        const pointTarget = clickedTarget || document.elementFromPoint(clientX, clientY);\n        let firstPassedTargets = this.hitTest({\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n        }, clientX, clientY, selectableTargets, selectableRects).filter(\n            target => target === pointTarget || target.contains(pointTarget),\n        );\n\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            return false;\n        }\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.getSelectedTargets(firstPassedTargets);\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", e) : true;\n\n        if (!result) {\n            return false;\n        }\n        this.select(firstPassedTargets, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        this.target.style.cssText += `left:${clientX}px;top:${clientY}px`;\n\n        if (isPreventSelect && selectByClick) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            return false;\n        } else {\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any) {\n        const {\n            distX,\n            distY,\n            datas,\n            inputEvent,\n        } = e;\n        const { startX, startY } = datas;\n        const tx = Math.min(0, distX);\n        const ty = Math.min(0, distY);\n        const width = Math.abs(distX);\n        const height = Math.abs(distY);\n\n        this.target.style.cssText\n            += `display: block;`\n            + `left:${startX}px;top:${startY}px;`\n            + `transform: translate(${tx}px, ${ty}px);`\n            + `width:${width}px;height:${height}px;`;\n\n        const left = startX + tx;\n        const top = startY + ty;\n        const passedTargets = this.hitTest({\n            left,\n            top,\n            right: left + width,\n            bottom: top + height,\n        }, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.getSelectedTargets(passedTargets);\n\n        this.select(selectedTargets, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDrag = (e: OnDrag) => {\n        const { scrollOptions } = this.options;\n        if (scrollOptions && scrollOptions.container) {\n            if (this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = ({ datas, inputEvent }: OnDragEvent) => {\n        this.dragScroll.dragEnd();\n        this.target.style.cssText += \"display: none;\";\n        this.selecteEnd(datas.startSelectedTargets, datas.selectedTargets, inputEvent);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        return toggleContinueSelect.every(key => combi.indexOf(key) > -1);\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.dragger.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = [].slice.call(dragContainer) as Element[];\n\n        containers.some(container => {\n            if (container === e.target || container.contains(e.target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends Component, SelectoProperties {\n    on<T extends keyof SelectoEvents>(eventName: T, handlerToAttach: (event: SelectoEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["getClient","e","touch","touches","clientX","clientY","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","hasClass","addClass","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","injector","styled","CLASS_NAME","OPTIONS","OPTION_TYPES","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","PROPERTIES","EVENTS","METHODS","__extends","options","_super","_this","ChildrenDiffer","DragScroll","clickedTarget","datas","inputEvent","getSelectableTargets","selectableRects","map","rect","getBoundingClientRect","left","top","width","height","right","bottom","startSelectedTargets","selectedTargets","pointTarget","elementFromPoint","firstPassedTargets","hitTest","filter","contains","hasInsideTargets","length","isPreventSelect","getSelectedTargets","type","isTrusted","result","trigger","select","startX","startY","cssText","onDragEnd","preventDefault","dragScroll","dragStart","drag","check","dragEnd","selecteEnd","sameCombiKey","dragger","isFlag","window","documentElement","containers","slice","call","some","undefined","initElement","initDragScroll","setKeyController","differ","setKeyEvent","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","dragEvent","onDragStart","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Dragger","dragstart","onDrag","dragend","addEvent","inject","selectRect","targets","rects","passedTargets","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","Math","max","testRight","min","testTop","testBottom","push","rate","round","direction","offsetX","offsetY","scrollBy","distX","distY","isObject","elements","list","prevList","added","removed","index","concat","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","tx","ty","abs","combi","getCombi","key","every","indexOf","Selecto","Properties","prototype","property","enumerable","configurable","get","setter","camelize","set","value","defineProperty","Component","modules"],"mappings":"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"}