{"version":3,"file":"selecto.esm.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx"],"sourcesContent":["import { Hypertext } from \"./types\";\nimport { IObject, addClass, hasClass } from \"@daybrush/utils\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n};\n\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n    \"triggerDragStart\",\n] as const;\n","import Component from \"@egjs/component\";\nimport Dragger, { OnDrag } from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends Component {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private dragger!: Dragger;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n        this.differ = new ChildrenDiffer(selectedTargets);\n\n        return this;\n    }\n\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.dragger.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.dragger.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.dragger.onDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.dragger = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent: OnDragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n        };\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.dragger = new Dragger(this.dragContainer, {\n            container: window,\n            checkInput,\n            preventDefault,\n            dragstart: this.onDragStart,\n            drag: this.onDrag,\n            dragend: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target);\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const passedTargets: Array<HTMLElement | SVGElement> = [];\n\n        rects.forEach((rect, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rect;\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                passedTargets.push(targets[i]);\n                return;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                passedTargets.push(targets[i]);\n            }\n        });\n\n        return passedTargets;\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectableRects.forEach(rect => {\n                rect.top -= offsetY;\n                rect.bottom -= offsetY;\n                rect.left -= offsetX;\n                rect.right -= offsetX;\n            });\n            this.dragger.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private getSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(selectedTargets: Array<HTMLElement | SVGElement>, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble } = e;\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragEvent, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const { continueSelect, selectFromInside, selectByClick } = this.options;\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n        datas.startSelectedTargets = this.selectedTargets;\n\n        const pointTarget = clickedTarget || document.elementFromPoint(clientX, clientY);\n        let firstPassedTargets = this.hitTest({\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n        }, clientX, clientY, selectableTargets, selectableRects).filter(\n            target => target === pointTarget || target.contains(pointTarget),\n        );\n\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            return false;\n        }\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.getSelectedTargets(firstPassedTargets);\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", e) : true;\n\n        if (!result) {\n            return false;\n        }\n        this.select(firstPassedTargets, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        this.target.style.cssText += `left:${clientX}px;top:${clientY}px`;\n\n        if (isPreventSelect && selectByClick) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            return false;\n        } else {\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any) {\n        const {\n            distX,\n            distY,\n            datas,\n            inputEvent,\n        } = e;\n        const { startX, startY } = datas;\n        const tx = Math.min(0, distX);\n        const ty = Math.min(0, distY);\n        const width = Math.abs(distX);\n        const height = Math.abs(distY);\n\n        this.target.style.cssText\n            += `display: block;`\n            + `left:${startX}px;top:${startY}px;`\n            + `transform: translate(${tx}px, ${ty}px);`\n            + `width:${width}px;height:${height}px;`;\n\n        const left = startX + tx;\n        const top = startY + ty;\n        const passedTargets = this.hitTest({\n            left,\n            top,\n            right: left + width,\n            bottom: top + height,\n        }, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.getSelectedTargets(passedTargets);\n\n        this.select(selectedTargets, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDrag = (e: OnDrag) => {\n        const { scrollOptions } = this.options;\n        if (scrollOptions && scrollOptions.container) {\n            if (this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas } = e;\n        this.dragScroll.dragEnd();\n        this.target.style.cssText += \"display: none;\";\n        this.selectEnd(datas.startSelectedTargets, datas.selectedTargets, e);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        return toggleContinueSelect.every(key => combi.indexOf(key) > -1);\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.dragger.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = dragContainer instanceof Element\n            ? [dragContainer] : [].slice.call(dragContainer) as Element[];\n        const target = e.target;\n\n        containers.some(container => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends Component, SelectoProperties {\n    on<T extends keyof SelectoEvents>(eventName: T, handlerToAttach: (event: SelectoEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Selecto;\n"],"names":["getClient","e","touch","touches","changedTouches","clientX","clientY","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","hasClass","addClass","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","injector","styled","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","EVENTS","METHODS","__extends","options","_super","_this","ChildrenDiffer","DragScroll","clickedTarget","datas","inputEvent","getSelectableTargets","selectableRects","map","rect","getBoundingClientRect","left","top","width","height","right","bottom","startSelectedTargets","selectedTargets","pointTarget","elementFromPoint","firstPassedTargets","hitTest","filter","contains","hasInsideTargets","length","isPreventSelect","getSelectedTargets","type","isTrusted","result","trigger","select","startX","startY","cssText","onDragEnd","dragScroll","dragStart","drag","check","dragEnd","selectEnd","sameCombiKey","dragger","isFlag","window","documentElement","containers","Element","slice","call","some","undefined","initElement","initDragScroll","setKeyController","differ","setKeyEvent","value","onDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","dragEvent","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Dragger","dragstart","onDrag","dragend","addEvent","inject","selectRect","targets","rects","passedTargets","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","Math","max","testRight","min","testTop","testBottom","push","rate","round","direction","offsetX","offsetY","scrollBy","distX","distY","isObject","elements","list","prevList","added","removed","index","concat","selected","isDouble","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","tx","ty","abs","combi","getCombi","key","every","indexOf","Selecto","Properties","prototype","property","enumerable","configurable","get","setter","camelize","set","defineProperty","Component"],"mappings":"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"}